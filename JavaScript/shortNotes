<-----------------------------------------------------------HTML------------------------------------------------------------->
&nbsp; -> for spaces
&lt; -> less than
&gt; -> greater than

preload in audio tag

shift + tab to reduce indentation

importance of name attribute in form input tag

<-----------------------------------------------------------CSS-------------------------------------------------------------->

Selectors:
1. element selector
2. class selector
3. id selector
4. child selector (div > p)
5. descendant selector (div p) for nested p's inside div
6. universal selector (*)
7. Pseudo selector 
- a:visited{ }
- a:link{ } 
- a:click { }
- Div:hover { }
- p:first-child { }

Margin >> Border >> Padding >> Content

box-sizing: border box; // covers the height of content with padding and border, not margin
margin-collapse: collapse // when margin of two containers collide then they share the same margin

text-decoration: underline
text-decoration-color: #ffffff
text-decoration-style: wavy
text-decoration-thickness: 4px
text-indent: 45px
text-overflow: clip (cut the extra) || ellipsis (...)
word-break: break-all

CSS Specificity: (uses Cascade algorithm)
position > specificity (id > inline css > class > element > universal) > origin > important (!important)

margin-auto // centers a div gives margin from left and right automatically but not works on inline elements and also cannot
set the width and margin or padding top of inline elements like span or input. To do so use display: inline-block

px depends on resolution,
vh vw are device specific,
vmin and vmax depends on orientation, (vmin for vw for phone and vh for pc)
em is multiplier on current value,
rem is a multiplier on current value in respective to the root element,
% depends on parent

box-shadow: h-offset v-offset blur spread color inset

By default list content and list icon is separated 
list-style-position: inside to combine them for styling

Overflow:
hidden
auto
scroll
white-space: nowrap (text will go in single line)

Position:
static
relative
absolute
fixed
sticky
Note: filter, transform or perspective properties can also make an element appear as positioned to parent element

CSS variables: (global and local)
:root{
    --bg-color: rgb(255, 34, 25);
}
use:
background-color: var(--bg-color);
Variables can be updated

::before && ::after are used to add elements dynamically through css
::selection -> to add css to change styles while selection
:first-letter -> change style of first letter

transform-origin changes the point at which the element 
transforms rather than moving the entire element (as translate would). 
The default value is transform-origin: 50% 50%;.

https://www.geeksforgeeks.org/css-grid-layout-the-fr-unit/

Object-fit: cover; // cover the image child with the child width & height
Object-fit: contains; // contains the image child with the child width & height
Object-position: top right; // shows the top right of the image cover the image

<---------------------------------------------------------Javascript------------------------------------------------------------->


DOM
document.title, document.body (whole html body code), document.body.childNodes (text nodes, comment and elements).
document.body.firstChild, lastChild, firstElementChild, lastElementChild
document.body.firstElementChild.children (only elements)
nextElementSibiling
previousElementSibiling
document.body.firstElementChild.parentElement

Selectors
document.getElementById
document.getElementsByClassName
document.querySelector(.class or #id)
document.querySelectorAll() -> returns NodeList

innerHTML and outerHTML (provides both inner and outer html)
textContent
hasAttribute()
getAttribute()
setAttribute()
removeAttribute()
ele.attributes();
document.designMode="on" -> change any webpage

Callback function is a function passed into another function as an argument, which is then invokes inside the outer function to complete an action.
Callback hell or pyramid of doom: more and more nested callbacks, the code becomes deeper and increasingly more difficult to manage.
The solution of the doom is promises. A promise is a "promise of code execution". The code either executes or fails in both the cases the user get notified. The promise object returned by the new promise constructor has the state (fulfilled, pending, reject) and result(resolved or rejected). The consuming code can receive the final result of a promise through then and catch.

let promise = new Promise((resolve, reject)=>{
    setTimeout(()=>{
         console.log("Resolved");
         resolve("Promise resolved");
    }, 1000);
}
promise.then((a)=>{
   console.log(a);
}.catch((err)=>{
   console.log(err);
}

Promise API:
There are 6 static methods of promise class:-
1. Promise.add(promises) - waits for all promises to resolve and returns the array of there results. If either of one fails, it becomes the error and all other results are ignored.
2. Promise.allSettled(promises) - waits for all the promises to settle and returns there results as an array of objects with status and value.
3. Promise.race(promises) - waits for the first promise to settle and its result/error becomes the outcome.
4. Promise.any(promises) - waits for the first promise to fulfill, and its result becomes the outcome. Throws aggregate error if all the promises are rejected.
5. Promise.resolve(value) - makes a resolved promise with the given value.
6. Promise.reject(error) - makes a rejected promise with the given error.

Throwing and Handling errors:
throw SyntaxError("message"); // throwing error
try{
   // try this code
}
catch{
    // error got caught
}
finally{
    // this will definitely execute so that if you're in functions it will run after the function value is returned.
}

Object Oriented Programming Paradigm:
Classes are the blueprint of object like an empty form.
Objects are instance of a class like a filled form.
Prototype: JavaScript has a special object called prototype that is either null or has reference of another object.
[[Prototype]] used for prototypal inheritance.

IIFE: Immediately Invoked Function Expression is a JavaScript function that runs as soon as it is defined.
(function () {
  // …
})();

(() => {
  // …
})();

(async () => {
  // …
})();
Use cases:
1. Avoid polluting the global namespace: Because our application could include many functions and global variables from different source files, it's important to limit the number of global variables. If we have some initiation code that we don't need to use again, we could use the IIFE pattern. 
2. Execute an async function: An async IIFE allows you to use await and for-await even in older browsers and JavaScript runtimes that have no top-level await.
